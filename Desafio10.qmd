---
title: "Desafio10"
author: "Gabriel Belchior"
format: html
editor: visual
---
##Slides 1
```{r}
# Carrega o pacote 'reticulate', que integra R com Python
library(reticulate)
```

```{r}
# Instala os pacotes Python 'polars', 'fastexcel' e 'pyarrow' no ambiente 'r-reticulate'
reticulate::py_install(c("polars", "fastexcel", "pyarrow"), method = "auto", envname = "r-reticulate")
```

```{python}
# Importa a biblioteca Polars, utilizada para manipulação eficiente de dados em tabelas (semelhante ao pandas)
import polars as pl
```

```{python}
# Lê o arquivo 'airports.csv' e seleciona apenas as colunas IATA_CODE, CITY e STATE
aeroportos = pl.read_csv("airports.csv",
                         columns = ["IATA_CODE", "CITY", "STATE"])
aeroportos.head(2)
```

```{python}
# Lê o arquivo Excel 'WDIEXCEL.xlsx', aba "Country", e seleciona duas colunas
wdi = pl.read_excel("WDIEXCEL.xlsx", sheet_name = "Country",
                    columns = ["Short Name", "Region"])
wdi.head(2)
```

```{python}
# Cria um DataFrame do Polars com três colunas e alguns valores nulos
df = pl.DataFrame({
    "grupo": ["A", "A", "B", "B", "C"],
    "valor1": [10, 15, 10, None, 25],
    "valor2": [5, None, 20, 30, None]
})
df
```

```{python}
# Acessa a coluna 'valor1' do DataFrame
df["valor1"]
```

```{python}
# Calcula a média de 'valor1', ignorando automaticamente os valores nulos
df["valor1"].mean()
```

```{python}
# Remove os valores nulos da coluna 'valor1'
df["valor1"].drop_nulls()
```

```{python}
# Remove os valores nulos de 'valor1' e calcula a média
df["valor1"].drop_nulls().mean()
```

```{python}
# Seleciona e calcula a média das colunas 'valor1' e 'valor2'
df.select([
  pl.col("valor1").mean().alias("media_v1"),
  pl.col("valor2").mean()
])
```

```{python}
# Agrupa o DataFrame por 'grupo', calcula a média de 'valor1' e o mínimo de 'valor2'
df.group_by("grupo").agg([
  pl.col("valor1").mean().alias("media_valor1"),
  pl.col("valor2").min().alias("min_valor2")
]).sort("grupo")
```

```{python}
# Lê o arquivo 'flights.csv', selecionando colunas específicas e definindo os tipos de dados
voos = pl.read_csv("flights.csv",
                   columns = ["AIRLINE", "ARRIVAL_DELAY", "DESTINATION_AIRPORT"],
                   dtypes = {"AIRLINE": pl.Utf8,
                             "ARRIVAL_DELAY": pl.Int32,
                             "DESTINATION_AIRPORT": pl.Utf8})
voos.shape
```

```{python}
# Visualiza as 3 primeiras linhas do DataFrame de voos
voos.head(3)
```

```{python}
# Filtra voos com companhias e destinos específicos, remove nulos e calcula a taxa de atrasos (>30min)
resultado = (
  voos.drop_nulls(["AIRLINE", "DESTINATION_AIRPORT", "ARRIVAL_DELAY"])
  .filter(
    pl.col("AIRLINE").is_in(["AA", "DL"]) &
    pl.col("DESTINATION_AIRPORT").is_in(["SEA", "MIA", "BWI"])
    )
    .group_by(["AIRLINE", "DESTINATION_AIRPORT"])
    .agg([
      (pl.col("ARRIVAL_DELAY") > 30).mean().alias("atraso_medio")
      ])
)
```

```{python}
# Ordena o resultado pelo atraso médio (ascendente)
resultado.sort("atraso_medio")
```

## Slides 2

```{python}
# Cria um DataFrame de clientes
clientes = pl.DataFrame({
    "cliente_id": [1, 2, 3, 4],
    "nome": ["Ana", "Bruno", "Clara", "Daniel"]
})
print(clientes)
```

```{python}
# Cria um DataFrame de pedidos (notar que cliente_id = 5 não está no DataFrame de clientes)
pedidos = pl.DataFrame({
    "pedido_id": [101, 102, 103, 104, 105],
    "cliente_id": [1, 2, 3, 1, 5],
    "valor": [100.50, 250.75, 75.00, 130.00, 79.00]
})
print(pedidos)
```

```{python}
# Inner join entre clientes e pedidos (apenas clientes que fizeram pedidos aparecem)
res_ij = clientes.join(pedidos, on="cliente_id", how="inner")
print(res_ij)
```

```{python}
# Left join (todos os clientes aparecem, mesmo sem pedidos)
res_lj = clientes.join(pedidos, on="cliente_id", how="left")
print(res_lj)
```

```{python}
# Right join (todos os pedidos aparecem, mesmo sem cliente correspondente)
res_rj = clientes.join(pedidos, on="cliente_id", how="right")
print(res_rj)
```

```{python}
# Outer join (todos os clientes e pedidos aparecem, combinando onde possível)
res_oj = clientes.join(pedidos, on="cliente_id", how="outer")
print(res_oj)
```

```{python}
# Cross join (produto cartesiano entre clientes e pedidos)
res_cj = clientes.join(pedidos, how="cross")
print(res_cj)
```

```{python}
# Mostra novamente os dados dos clientes
print(clientes)
```

```{python}
# Mostra novamente os dados dos pedidos
print(pedidos)
```

```{python}
# Agrupa por nome e cliente_id e calcula a média dos valores de pedidos
res = res_ij.group_by(["nome", "cliente_id"]).agg(pl.col("valor").mean())
print(res)
```

```{python}
# Mostra os dados dos clientes (de novo, por conferência)
print(clientes)
```

```{python}
# Mostra os dados dos pedidos (novamente)
print(pedidos)
```

```{python}
# Soma os valores dos pedidos por cliente (após outer join), considerando apenas valores > 100
res = (res_oj.with_columns(pl.col("valor") > 100)
       .group_by("nome")
       .agg(pl.col("valor").sum()))
print(res)
```

```{python}
# Cria DataFrame de vendas com IDs de cliente e produto
vendas = pl.DataFrame({
    "id_venda": [1, 2, 3],
    "id_cl": [1, 2, 1],
    "id_prod": [101, 102, 103],
    "qtde": [2, 1, 1]
})
```

```{python}
# Cria DataFrame com detalhes de pedidos (valor de cada produto por cliente)
detalhes_pedidos = pl.DataFrame({
    "id_ped": [201, 202, 203],
    "cl_id": [1, 2, 1],
    "id_prod": [101, 102, 104],
    "valor": [50.00, 75.00, 100.00]
})
```

```{python}
# Mostra o DataFrame de vendas
print(vendas)
```

```{python}
# Mostra o DataFrame de detalhes de pedidos
print(detalhes_pedidos)
```

```{python}
# Faz um join entre vendas e detalhes de pedidos baseado em cliente e produto
final = vendas.join(detalhes_pedidos,
                    left_on = ["id_cl", "id_prod"],
                    right_on = ["cl_id", "id_prod"],
                    how = "inner")
print(final)
```

```{r}
# Captura a hora atual do sistema e exibe no documento
tempo_renderizacao <- format(Sys.time(), "%d/%m/%Y às %H:%M:%S")

cat("Documento renderizado em:", paste0("**", tempo_renderizacao, "**"))
```

